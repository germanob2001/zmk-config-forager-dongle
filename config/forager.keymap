/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/rgbled_widget.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <125>;
    flavor = "tap-preferred";
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        th {
            bindings = <&TH_THE>;
            key-positions = <4 15>;
        };

        yu_you {
            bindings = <&yu_you>;
            key-positions = <5 6>;
        };

        an_and {
            bindings = <&an_and>;
            key-positions = <10 25>;
        };

        cn_can {
            bindings = <&cn_can>;
            key-positions = <22 25>;
        };
    };

    macros {
        TH_THE: TH_THE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp H &kp E>;
            label = "TH_THE";
        };

        yu_you: yu_you {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp O &kp U>;
            label = "YU_YOU";
        };

        an_and: an_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp N &kp D>;
            label = "AN_AND";
        };

        cn_can: cn_can {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp A &kp N>;
            label = "CN_CAN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
  &kp Q  &kp W           &kp E           &kp R               &kp T          &kp Y        &kp U               &kp I                    &kp O                 &kp P
  &kp A  &mt LEFT_ALT S  &mt LEFT_GUI D  &mt LEFT_CONTROL F  &kp G          &kp H        &mt LEFT_CONTROL J  &mt LEFT_GUI K           &mt LEFT_ALT L        &kp RET
  &kp Z  &kp X           &kp C           &kp V               &kp B          &kp N        &kp M               &mt RIGHT_CONTROL COMMA  &mt RIGHT_GUI PERIOD  &kp BSPC
                                         &kp LEFT_SHIFT      &lt 1 SPACE    &lt 2 SPACE  &kp RIGHT_SHIFT
            >;
        };

        numbers {
            bindings = <
  &kp LC(LS(ESCAPE))  &kp RA(NUMBER_2)  &trans     &trans              &mo 4                  &kp RIGHT_BRACE   &kp N7          &kp N8  &kp N9  &kp MINUS
  &trans              &trans            &kp LC(C)  &kp LC(LS(V))       &kp LC(V)              &kp NON_US_BSLH   &kp N4          &kp N5  &kp N6  &kp LC(SEMI)
  &trans              &trans            &trans     &kp RA(LEFT_BRACE)  &kp RA(RIGHT_BRACE)    &kp LS(NUMBER_9)  &kp N1          &kp N2  &kp N3  &kp SLASH
                                                   &trans              &trans                 &kp RALT          &kp LEFT_SHIFT
            >;
        };

        symbols {
            bindings = <
  &kp ESCAPE  &trans         &kp LEFT_ALT          &kp LEFT_GUI                &trans                     &kp LS(N7)        &kp N7          &kp UP_ARROW    &kp N9           &kp EQUAL
  &kp TAB     &trans         &mt LEFT_SHIFT LC(C)  &mt LEFT_CONTROL RS(LC(V))  &kp LC(V)                  &kp LS(NUMBER_8)  &kp LEFT        &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp SQT
  &caps_word  &kp LS(COMMA)  &kp MINUS             &kp RA(LS(LEFT_BRACE))      &kp RA(LS(RIGHT_BRACE))    &kp LS(NUMBER_9)  &kp RA(SQT)     &kp RA(BSLH)    &kp N3           &kp LC(BSPC)
                                                   &kp LEFT_CONTROL            &mo 3                      &kp LC(LSHFT)     &kp LEFT_SHIFT
            >;
        };

        bt {
            bindings = <
  &bt BT_SEL 0        &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4            &kp C_VOLUME_UP    &mkp LCLK           &mmv MOVE_UP    &mkp RCLK        &kp LG(P)
  &bt BT_DISC 0       &bt BT_CLR      &trans        &trans        &kp C_BRIGHTNESS_INC    &kp K_MUTE         &mmv MOVE_LEFT      &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp RS(SLASH)
  &kp LA(LC(DELETE))  &studio_unlock  &trans        &trans        &kp C_BRIGHTNESS_DEC    &kp C_VOLUME_DOWN  &kp LG(LEFT_ARROW)  &kp LG(TAB)     &kp LG(RIGHT)    &kp SLASH
                                                    &trans        &trans                  &trans             &trans
            >;
        };

        layer_3 {
            bindings = <
  &trans  &trans  &trans  &trans    &trans      &trans  &kp F7     &kp F8  &kp F9  &kp F10
  &trans  &trans  &trans  &trans    &trans      &trans  &kp F4     &kp F5  &kp F6  &kp F11
  &trans  &trans  &trans  &trans    &trans      &trans  &kp F1     &kp F2  &kp F3  &kp F12
                          &mkp MB2  &mkp MB1    &trans  &soft_off
            >;
        };
    };
};
